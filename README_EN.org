#+TITLE: Emacs Rime

[[https://melpa.org/#/rime][file:https://melpa.org/packages/rime-badge.svg]] [[https://stable.melpa.org/#/rime][file:https://stable.melpa.org/packages/rime-badge.svg]]

[[file:https://i.imgur.com/jHpk7BT.gif]]

Emacs in Rime, support multiple schemas.

* Installation & How to use

  Check [[file:INSTALLATION_EN.org][Intallation]].

* Keybindings in Rime.

With following configuration, you can send a serials of keybindings to Rime.
Since you may want them to help you with cursor navigation, candidate pagination and selection.

Currently the keybinding with Control(C-), Meta(M-) and Shift(S-) is supported.

#+BEGIN_SRC emacs-lisp
  ;; defaults
  (setq rime-translate-keybindings
    '("C-f" "C-b" "C-n" "C-p" "C-g" "<left>" "<right>" "<up>" "<down>" "<prior>" "<next>" "<delete>"))
#+END_SRC

* Candidate menu style

Set via ~rime-show-candidate~.

| Value      | description                                                                 |
|------------+-----------------------------------------------------------------------------|
| ~nil~        | don't show candidate at all.                                                |
| ~minibuffer~ | Display in minibuffer.                                                      |
| ~message~    | Display with ~message~ function, useful when you use minibuffer as mode-line. |
| ~popup~      | Use popup.                                                                  |
| ~posframe~   | Use posfarme, will fallback to popup in TUI                                 |
| ~sidewindow~ | Use sidewindow.

* Open Rime menu

Assuming you use ~C-~~ for the menu.

#+begin_src yaml
  switcher:
    caption: 〔方案選單〕
    hotkeys:
      - Control+grave
#+end_src

You can bind this key to ~rime-mode-map~ with command ~rime-send-keybinding~.

#+begin_src emacs-lisp
  (use-package
    ...

    :bind
    (:map rime-mode-map
          ("C-`" . 'rime-send-keybinding))
    ...
    )
#+end_src

* The lighter

You can get a lighter via ~(rime-lighter)~, which returns you a colored ~ㄓ~.
Put it in modeline or anywhere you want.

You can customize with ~rime-title~, ~rime-indicator-face~ and ~rime-indicator-dim-face~.

* Temporarily ascii mode

If you want specific a list of rules to automatically enable ascii mode, you can customize ~rime-disable-predicates~.

Following is a example to use ascii mode in ~evil-normal-state~ or when cursor is after alphabet character or when cursor is in code.

#+BEGIN_SRC emacs-lisp
  (setq rime-disable-predicates
        '(rime-predicate-evil-mode-p
          rime-predicate-after-alphabet-char-p
          rime-predicate-prog-in-code-p))
#+END_SRC

#+html: <details>
#+html: <summary>Built-in Predicate Functions</summary>

- ~rime-predicate-after-alphabet-char-p~

  After an alphabet character (must beginning with letter [a-zA-Z]).

- ~rime-predicate-after-ascii-char-p~

  After any alphabet character.

- ~rime-predicate-prog-in-code-p~

  On ~prog-mode~ and ~conf-mode~, not in comments and quotes.

- ~rime-predicate-in-code-string-p~

  In the code string(not comment string).

- ~rime-predicate-evil-mode-p~

  In the non-editing state of ~evil-mode~.

- ~rime-predicate-ace-window-p~

  If the ~ace-window-mode~ is activated.

- ~rime-predicate-hydra-p~

  If a ~hydra~ keymap is activated.

- ~rime-predicate-current-input-punctuation-p~

  When entering punctuation.

- ~rime-predicate-punctuation-after-space-cc-p~

  When entering punctuation after a Chinese character appended with whitespaces.

- ~rime-predicate-punctuation-after-ascii-p~

  When entering punctuation after an ascii character.

- ~rime-predicate-punctuation-line-begin-p~

  When entering punctuation at the beginning of the line.

- ~rime-predicate-space-after-ascii-p~

  After an ascii character appended with whitespaces.

- ~rime-predicate-space-after-cc-p~

  After a Chinese character appended with whitespaces.

- ~rime-predicate-current-uppercase-letter-p~

  When entering a uppercase letter.

- ~rime-predicate-tex-math-or-command-p~

  When inside a (La)TeX math environment or entering a (La)TeX command.

#+html: </details>

** Force enable

If one of ~rime-disable-predicates~ returns t, you can still force enable the input method with ~rime-force-enable~.
The effect will only last for one input behavior.

You probably want to give this command a keybinding.

* The soft cursor

Default to ~|~ , you can customize it with

#+BEGIN_SRC emacs-lisp
  (setq rime-cursor "˰")
#+END_SRC

* Shortcut to open Rime configuration file

Use ~rime-open-configuration~.

* FAQ

#+html: <details>
#+html: <summary><b>How to get Emacs with dynamic module support?</b></summary><br/>

- **Linux**

Emacs included in major linux distributions has dynamic module support enabled by default.

- **MacOS**

~emacs-plus~ enables dynamic modules support by default. homebrew installation:
#+BEGIN_SRC shell
brew tap d12frosted/emacs-plus
brew install emacs-plus
#+END_SRC

When installing ~emacs-mac~, you need to add ~--with-modules~ option. homebrew installation:
#+BEGIN_SRC shell
brew tap railwaycat/emacsmacport
brew install emacs-mac --with-modules
#+END_SRC

- **Compile Emacs 26 manually**

Use ~--with-modules~ option.

#+html: </details>

#+html: <details>
#+html: <summary><b>Can't find rime_api.h when compile</b></summary><br/>

You *MUST* specify ~rime-librime-root~ in this case.

Check Installation for how to set.

#+html: </details>

#+html: <details>
#+html: <summary><b>Can't find emacs-module.h when compile</b></summary><br/>

If you build Emacs by yourself and does not install to standard location,
you *MUST* specify ~rime-emacs-module-header-root~.

Put following in the ~:custom~ section.

(Assuming you install Emacs to ~/emacs)

#+BEGIN_SRC emacs-lisp
(rime-emacs-module-header-root "~/emacs/include")
#+END_SRC
#+html: </details>

#+html: <details>
#+html: <summary><b>The last item of the candidate box is not displayed?</b></summary><br/>

Few users occasionally have a issue that the last candidate word is not displayed.
It can be determined that this is related to `posframe`, but the reason has not
been found. A temporary solution is to append a full-width whitespace to the end of
the candidate list.
#+BEGIN_SRC emacs-lisp
(defun +rime--posframe-display-content-a (args)
  "Append a full-width whitespace to the input string.
This can temporarily solve the problem of `posframe` occasionally
\"eating\" words."
  (cl-destructuring-bind (content) args
    (let ((newresult (if (string-blank-p content)
                         content
                       (concat content "　"))))
      (list newresult))))

(if (fboundp 'rime--posframe-display-content)
    (advice-add 'rime--posframe-display-content
                :filter-args
                #'+rime--posframe-display-content-a)
  (error "Function `rime--posframe-display-content' is not available."))
#+END_SRC

#+html: </details>

#+html: <details>
#+html: <summary><b>Want a pure emacs input method without <code>librime</code>?</b></summary><br/>

Maybe, you need [[https://github.com/tumashu/pyim][pyim]].

#+html: </details>

#+html: <details>
#+html: <summary><b>How to integrate this with <code>evil-escape</code>?</b></summary>

*The following code may have performance issue*

Add the following code snippet in your configuration files, then you can use [[https://github.com/syl20bnr/evil-escape][evil-escape]]
to return to normal state when having nothing in editing(no preedit overlay).
#+BEGIN_SRC emacs-lisp
  (defun rime-evil-escape-advice (orig-fun key)
    "advice for `rime-input-method' to make it work together with `evil-escape'.
          Mainly modified from `evil-escape-pre-command-hook'"
    (if rime--preedit-overlay
        ;; if `rime--preedit-overlay' is non-nil, then we are editing something, do not abort
        (apply orig-fun (list key))
      (when (featurep 'evil-escape)
        (let (
              (fkey (elt evil-escape-key-sequence 0))
              (skey (elt evil-escape-key-sequence 1))
              )
          (if (or (char-equal key fkey)
                  (and evil-escape-unordered-key-sequence
                       (char-equal key skey)))
              (let ((evt (read-event nil nil evil-escape-delay)))
                (cond
                 ((and (characterp evt)
                       (or (and (char-equal key fkey) (char-equal evt skey))
                           (and evil-escape-unordered-key-sequence
                                (char-equal key skey) (char-equal evt fkey))))
                  (evil-repeat-stop)
                  (evil-normal-state))
                 ((null evt) (apply orig-fun (list key)))
                 (t
                  (apply orig-fun (list key))
                  (if (numberp evt)
                      (apply orig-fun (list evt))
                    (setq unread-command-events (append unread-command-events (list evt))))))
                )
            (apply orig-fun (list key)))))))


  (advice-add 'rime-input-method :around #'rime-evil-escape-advice)
#+END_SRC

#+html: </details>

* Thanks for all the contributors

- [[https://github.com/Z572][Z572]]
- [[https://github.com/cnsunyour][cnsunyour]]
- [[https://github.com/shuxiao9058][shuxiao9058]]
- [[https://github.com/lkzz][lkzz]]
- [[https://github.com/wsw0108][wsw0108]]
- [[https://github.com/HesperusArcher][HesperusArcher]]
- [[https://github.com/longminwang][longminwang]]
- [[https://github.com/chuxubank][chuxubank]]
- [[https://github.com/jixiuf][jixiuf]]
- [[https://github.com/cireu][cireu]]
- [[https://github.com/ilupin][ilupin]]
- [[https://github.com/dwuggh][dwuggh]]
- [[https://github.com/zilongshanren][zilongshanren]]
- [[https://github.com/zhmars][zhmars]]
- [[https://github.com/syohex][syohex]]
- [[https://github.com/pmeiyu][pmeiyu]]
- [[https://github.com/p1uxtar][p1uxtar]]
- [[https://github.com/gemone][gemone]]
- [[https://github.com/casouri][casouri]]
- [[https://github.com/Tubo][Tubo]]
- [[https://github.com/Eason0210][Eason0210]]
- [[https://github.com/wang1zhen][wang1zhen]]
- [[https://github.com/shenlebantongying][shenlebantongying]]
- [[https://github.com/nasyxx][nasyxx]]
