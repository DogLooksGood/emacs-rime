#+TITLE: Emacs Rime

[[https://melpa.org/#/rime][file:https://melpa.org/packages/rime-badge.svg]] [[https://stable.melpa.org/#/rime][file:https://stable.melpa.org/packages/rime-badge.svg]]

[[file:https://i.imgur.com/jHpk7BT.gif]]

Emacs in Rime, support multiple schemas.

(*NOTE* This is the English version of README.org.
In this doc, TTBD means "Translation To Be Done".
PRs on localization work are welcome.)

* Part 1: Installation & How to use

  Check [[file:INSTALLATION_EN.org][Intallation]].
* Part 2: Rime Configuration and Data
#+html: <details>
#+html: <summary>toggle-folding</summary>
** Keybindings in Rime.

With following configuration, you can send a serials of keybindings to Rime.
Since you may want them to help you with cursor navigation, candidate pagination and selection.

Currently the keybinding with Control(C-), Meta(M-) and Shift(S-) is supported.

#+BEGIN_SRC emacs-lisp
  ;; defaults
  (setq rime-translate-keybindings
    '("C-f" "C-b" "C-n" "C-p" "C-g" "<left>" "<right>" "<up>" "<down>" "<prior>" "<next>" "<delete>"))
#+END_SRC

** Assign Rime share-data-dir and user-data-dir

~rime-share-data-dir~ is where Rime store its configuration post installation.
E.g. default path for Linux is usually =/usr/share/rime-data= ,
Normally you could just use the default value, or configure the variable to use another location.
E.g. for fcitx5-rime maybe this path: =~/.local/share/fcitx5/rime= .

~rime-user-data-dir~ is where emacs-rime deploy at,
the default path is =~/.emacs.d/rime= .
Configure the variable to use another location.

*Making ~emacs-rime~ 与 ~fcitx-rime~ share user-data-dir is NOT recommended* 。
Take using terra-pinyin in fcitx-rime and emacs-rime as an example, if configured
#+BEGIN_SRC emacs-lisp
(setq rime-user-data-dir "~/.config/fcitx/rime/")
#+END_SRC
then after first deployment of ~emacs-rime~ , a new ~terra_pinyin.userdb/~ folder is generated, and the original ~fcitx-rime~ usage logs are be moved to ~terra_pinyin.userdb.old/~ , leading to an empty vocabulary frequency information in ~terra_pinyin.userdb.txt~ .

** Shortcut to open Rime configuration file

Use ~rime-open-configuration~.

** Redeploy
#+html: <details>
#+html: <summary>toggle-folding</summary>

Same as RIME, the configuration file of ~emacs-rime~ does NOT take effect until redeployment.

Take adding terra-pinyin as an example.

Find the path where the configuration of ~emacs-rime~ locates,
or use ~M-x rime-open-configuration~ to open ~default.custom.yaml~ ,
goto ~patch:schema_list~ and add ~- schema: terra_pinyin~ .
Now you need ~M-x rime-deploy~ to redeploy to enable terra-pinyin.
After that you may press ~C-`~ to pop up rime menu and select desired one.

Example:
#+BEGIN_SRC yaml
patch:
  schema_list:
    - schema: luna_pinyin
    - schema: pinyin_simp
    - schema: terra_pinyin
  menu/page_size: 7 # show 7 candidates per page.
  switcher:
    hotkeys:
      - Control+grave # Key binding to active RIME's menu. Some editions of RIME support <F4> as shortcut, which is likely to clash with other programs.
#+END_SRC

*** Lost user vocabulary database after redeployment?

The cause may be using the same user-data-dir by ~emacs-rime~ and ~fcitx-rime~ , as explained earlier.

How to recover: (still, take terra_pinyin as an example) Set user-data-dir of ~emacs-rime~ to another folder, delete ~terra_pinyin.userdb/~ and rename ~terra_pinyin.userdb.old/~ to the previous one, resync or redeploy, ~terra_pinyin.userdb.txt~ should recover now.

#+html: </details>
** (TTBD)Sync vocabulary
#+html: <details>
#+html: <summary>toggle-folding</summary>

~M-x rime-sync~ 可对 RIME 输入方案和词库进行同步与备份，每次同步双向进行，词库生成的备份文件为 ~sync/ins_id/schema.userdb.txt~ ，其本身是文件夹 ~schema.userdb/~ 中词库与词频使用记录的纯文本形式，方便用户跨平台、多设备使用。

所谓双向同步，即当前设备中的词频或用户自造词（ ~schema.userdb/~ 中）与备份文件（ ~sync/ins_id/schema.userdb.txt~ 中）所记录的词库会被 RIME 合并，其 *并集* 将会继续记录在 ~schema.userdb/~ 中，同时生成一份新的备份文件，仍名为 ~sync/ins_id/schema.userdb.txt~ ，并（在不询问用户的情况下）将旧的覆盖。

上述路径中 ~sync~ 文件夹与配置文件 ~default.custom.yaml~ 在同一目录， ~ins_id~ 对应的是 ~installation.yaml~ 文件中 ~installation_id~ 的值，默认值为随机生成，可自定义为其他字符串。

以添加 ~地球拼音（terra_pinyin）~ 后同步为例。启用该方案后，在 RIME 数据目录下会产生名为 ~terra_pinyin.userdb~ 的文件夹，其中为使用频率与自造词的记录，不可随意修改。同步前先修改 ~installation.yaml~ 中内容为自定义的 ~installation_id: "hesperus"~ ，之后 ~M-x rime-sync~ ，将会在 ~sync/hesperus/~ 生成文件 ~terra_pinyin.userdb.txt~ （词库）与 ~terra_pinyin.schema.yaml~ （输入方案）。

若在其他设备或系统中有个人积累的词库，想继续使用。则先在旧系统中进行同步，将生成的 ~terra_pinyin.userdb.txt~ 复制到当前系统的 ~sync/hesperus/~ 下，再进行同步或部署，此时旧系统中备份的词库将会被合并到当前系统的 ~terra_pinyin.userdb/~ ，新的并集也将会被同时导出，并覆盖 ~terra_pinyin.userdb.txt~ 。

#+html: </details>
*** 词库同步失败？
#+html: <details>
#+html: <summary>toggle-folding</summary>

（以地球拼音方案使用为例。）

*建议将不同设备或系统中的 ~installation_id~ 设为同一值* 。若其不同，则可能同步失败，即从旧系统同步并复制的 ~terra_pinyin.userdb.txt~ 中的词频记录不会被纳入到当前的 ~terra_pinyin.userdb/~ 。
此时该文件中词频不为空，但其中 ~user_id~ 等不同，修改此值后再次同步仍可能不生效。
#+html: </details>
#+html: </details>
#+html: </details>
* Part 3: Appearance
#+html: <details>
#+html: <summary>toggle-folding</summary>
** Candidate menu style

Set via ~rime-show-candidate~.

| Value      | description                                                                 |
|------------+-----------------------------------------------------------------------------|
| ~nil~        | don't show candidate at all.                                                |
| ~minibuffer~ | Display in minibuffer.                                                      |
| ~message~    | Display with ~message~ function, useful when you use minibuffer as mode-line. |
| ~popup~      | Use popup.                                                                  |
| ~posframe~   | Use posfarme, will fallback to popup in TUI                                 |
| ~sidewindow~ | Use sidewindow.

** Candidate style

| Face                      | Meaning                                                |
|---------------------------+--------------------------------------------------------|
| ~rime-default-face~       | default foreground and background color(posframe only) |
| ~rime-code-face~          | color of code                                           |
| ~rime-candidate-num-face~ | color of candidate number                         |
| ~rime-comment-face~       | color of candidate comment                        |

** posframe/popup/sidewindow candidate style

Configure ~rime-posframe-style~ , ~rime-popup-style~ or ~rime-sidewindow-style~ , possible values:

| value        | meaning             |
|--------------+---------------------|
| ~simple~     | single lined        |
| ~horizontal~ | horizontal(default) |
| ~vertical~   | vertical            |

** Other properties of posframe

Configure ~rime-posframe-properties~ , but ~rime-default-face~ for color.

#+begin_src emacs-lisp
  (setq rime-posframe-properties
   (list :font "sarasa ui sc"
         :internal-border-width 10))
#+end_src

For supported configuration, see [[https://github.com/tumashu/posframe/blob/master/posframe.el#L212][posframe]] .

** Other properties of sidewindow

Configure ~rime-sidewindow-style~ , possible values are ~top~ , ~bottom~ , ~left~ , ~right~ , meaning the position where sidewindow should appear.

Configure ~rime-sidewindow-keep-window~ , if ~t~ then keeps sidewindow open.

** The lighter

You can get a lighter via ~(rime-lighter)~, which returns you a colored ~ㄓ~.
Put it in modeline or anywhere you want.

You can customize with ~rime-title~, ~rime-indicator-face~ and ~rime-indicator-dim-face~.

** The soft cursor

Default to ~|~ , you can customize it with

#+BEGIN_SRC emacs-lisp
  (setq rime-cursor "˰")
#+END_SRC

** Style of preedit text

Configure ~rime-preedit-face~ .

** Appearence format of preedit code

Configure ~rime-show-preedit~, possible values:
| values   | meaning                |
|----------+------------------------|
| ~t~      | show in menu           |
| ~inline~ | replace commit preview |
| ~nil~    | don't show             |

Note: Soft cursor won't appear using ~inline~ or ~nil~ .

#+html: </details>
#+html: </details>
* Part 4: Automation
#+html: <details>
#+html: <summary>toggle-folding</summary>
** Temporarily ascii mode

If you want specific a list of rules to automatically enable ascii mode, you can customize ~rime-disable-predicates~.

Following is an example to use ascii mode in ~evil-normal-state~ or when cursor is after alphabet character or when cursor is in code.

#+BEGIN_SRC emacs-lisp
  (setq rime-disable-predicates
        '(rime-predicate-evil-mode-p
          rime-predicate-after-alphabet-char-p
          rime-predicate-prog-in-code-p))
#+END_SRC

*** Built-in Predicate Functions

- ~rime-predicate-after-alphabet-char-p~

  After an alphabet character (must beginning with letter [a-zA-Z]).

- ~rime-predicate-after-ascii-char-p~

  After any alphabet character.

- ~rime-predicate-prog-in-code-p~

  On ~prog-mode~ and ~conf-mode~, not in comments and quotes.

- ~rime-predicate-in-code-string-p~

  In the code string(not comment string).

- ~rime-predicate-evil-mode-p~

  In the non-editing state of ~evil-mode~.

- ~rime-predicate-ace-window-p~

  If the ~ace-window-mode~ is activated.

- ~rime-predicate-hydra-p~

  If a ~hydra~ keymap is activated.

- ~rime-predicate-current-input-punctuation-p~

  When entering punctuation.

- ~rime-predicate-punctuation-after-space-cc-p~

  When entering punctuation after a Chinese character appended with whitespaces.

- ~rime-predicate-punctuation-after-ascii-p~

  When entering punctuation after an ascii character.

- ~rime-predicate-punctuation-line-begin-p~

  When entering punctuation at the beginning of the line.

- ~rime-predicate-space-after-ascii-p~

  After an ascii character appended with whitespaces.

- ~rime-predicate-space-after-cc-p~

  After a Chinese character appended with whitespaces.

- ~rime-predicate-current-uppercase-letter-p~

  When entering a uppercase letter.

- ~rime-predicate-tex-math-or-command-p~

  When inside a (La)TeX math environment or entering a (La)TeX command.

*** Indicator for indicating the state of temporary English state

Use ~(rime-lighter)~ to generate a character ~ㄓ~ for showing.
Customization is available by configuring ~rime-indicator-face~ and ~rime-indicator-dim-face~ .

The configuration below could replace the icon of input method, to make it using color to indicate the current state of temporary English state.

#+begin_src emacs-lisp
  ;;; See the default value of mode-line-mule-info as reference, which may contain somthing useful.
  (setq mode-line-mule-info '((:eval (rime-lighter))))
#+end_src

*** Temporary English input based on Rime inline ascii mode

Configure ~rime-inline-predicates~ , which structure is same as ~rime-disable-predicates~ but with lower priority.

The function is mainly for temporary input English text with spaces.

Because of the limit of current code, if not using default ~Shift_L~ to toggle inline ascii mode in Rime configuration, shoud specify that in emacs-rime.
It won't activate normally unless the configurations on both sides are the same.

#+begin_src emacs-lisp
  ;;; support shift-l, shift-r, control-l, control-r
  (setq rime-inline-ascii-trigger 'shift-l)
#+end_src

When preedit code exists, use ~rime-inline-ascii~ to toggle mode.

#+begin_src emacs-lisp
  (define-key rime-active-mode-map (kbd "M-j") 'rime-inline-ascii)
#+end_src

*** Prevent specific single characters from auto commit in inline-ascii mode
#+begin_src emacs-lisp
  (setq rime-inline-ascii-holder ?x)      ; Any single character that not trigger auto commit
#+end_src

*** Force enable

If one of ~rime-disable-predicates~ returns t, you can still force enable the input method with ~rime-force-enable~.
The effect will only last for one input behavior.

You probably want to give this command a keybinding.

** Commit the 1st item automatically when toggle input method

Give =rime-commit1-and-toggle-input-method= a keybinding to replace what =toggle-input-method= does.

** Commit the 1st item automatically when switch to evil-normal-state

Give ~rime-commit1-and-toggle-input-method~ a rebind in ~rime-active-mode-map~ on =<escape>= , an example configuration:
#+BEGIN_SRC elisp
(define-key rime-active-mode-map (kbd "<escape>") 'rime-commit1-and-evil-normal)
#+END_SRC

** Auto close input method after using minibuffer

Auto close as default.
Set ~rime-deactivate-when-exit-minibuffer~ to nil to cancel this behavior.

** How to integrate this with <code>evil-escape</code>?

*The following code may have performance issue*

Add the following code snippet in your configuration files, then you can use [[https://github.com/syl20bnr/evil-escape][evil-escape]]
to return to normal state when having nothing in editing(no preedit overlay).
#+BEGIN_SRC emacs-lisp
  (defun rime-evil-escape-advice (orig-fun key)
    "advice for `rime-input-method' to make it work together with `evil-escape'.
          Mainly modified from `evil-escape-pre-command-hook'"
    (if rime--preedit-overlay
        ;; if `rime--preedit-overlay' is non-nil, then we are editing something, do not abort
        (apply orig-fun (list key))
      (when (featurep 'evil-escape)
        (let (
              (fkey (elt evil-escape-key-sequence 0))
              (skey (elt evil-escape-key-sequence 1))
              )
          (if (or (char-equal key fkey)
                  (and evil-escape-unordered-key-sequence
                       (char-equal key skey)))
              (let ((evt (read-event nil nil evil-escape-delay)))
                (cond
                 ((and (characterp evt)
                       (or (and (char-equal key fkey) (char-equal evt skey))
                           (and evil-escape-unordered-key-sequence
                                (char-equal key skey) (char-equal evt fkey))))
                  (evil-repeat-stop)
                  (evil-normal-state))
                 ((null evt) (apply orig-fun (list key)))
                 (t
                  (apply orig-fun (list key))
                  (if (numberp evt)
                      (apply orig-fun (list evt))
                    (setq unread-command-events (append unread-command-events (list evt))))))
                )
            (apply orig-fun (list key)))))))


  (advice-add 'rime-input-method :around #'rime-evil-escape-advice)
#+END_SRC
#+html: </details>
* Part 5: Misc
#+html: <details>
#+html: <summary>toggle-folding</summary>
** Open Rime menu

Assuming you use ~C-~~ for the menu.

#+begin_src yaml
  switcher:
    caption: 〔方案選單〕
    hotkeys:
      - Control+grave
#+end_src

You can bind this key to ~rime-mode-map~ with command ~rime-send-keybinding~.

#+begin_src emacs-lisp
  (use-package
    ...

    :bind
    (:map rime-mode-map
          ("C-`" . 'rime-send-keybinding))
    ...
    )
#+end_src

#+html: </details>
* Part 6: FAQ

#+html: <details>
#+html: <summary>toggle-folding</summary>
** Use in isearch

emacs-rime won't work properly in isearch.
Use [[https://github.com/zk-phi/phi-search][phi-search]] instead.

** The last item of the candidate box is not displayed?

Few users occasionally have a issue that the last candidate word is not displayed.
It can be determined that this is related to `posframe`, but the reason has not
been found. A temporary solution is to append a full-width whitespace to the end of
the candidate list.
#+BEGIN_SRC emacs-lisp
(defun +rime--posframe-display-content-a (args)
  "Append a full-width whitespace to the input string.
This can temporarily solve the problem of `posframe` occasionally
\"eating\" words."
  (cl-destructuring-bind (content) args
    (let ((newresult (if (string-blank-p content)
                         content
                       (concat content "　"))))
      (list newresult))))

(if (fboundp 'rime--posframe-display-content)
    (advice-add 'rime--posframe-display-content
                :filter-args
                #'+rime--posframe-display-content-a)
  (error "Function `rime--posframe-display-content' is not available."))
#+END_SRC


** Want a pure emacs input method without <code>librime</code>?

Maybe, you need [[https://github.com/tumashu/pyim][pyim]].

#+html: </details>


#+html: </details>

* Part Fin: Thanks for all the contributors

- [[https://github.com/Z572][Z572]]
- [[https://github.com/cnsunyour][cnsunyour]]
- [[https://github.com/shuxiao9058][shuxiao9058]]
- [[https://github.com/lkzz][lkzz]]
- [[https://github.com/wsw0108][wsw0108]]
- [[https://github.com/HesperusArcher][HesperusArcher]]
- [[https://github.com/longminwang][longminwang]]
- [[https://github.com/chuxubank][chuxubank]]
- [[https://github.com/jixiuf][jixiuf]]
- [[https://github.com/cireu][cireu]]
- [[https://github.com/ilupin][ilupin]]
- [[https://github.com/dwuggh][dwuggh]]
- [[https://github.com/zilongshanren][zilongshanren]]
- [[https://github.com/zhmars][zhmars]]
- [[https://github.com/syohex][syohex]]
- [[https://github.com/pmeiyu][pmeiyu]]
- [[https://github.com/p1uxtar][p1uxtar]]
- [[https://github.com/gemone][gemone]]
- [[https://github.com/casouri][casouri]]
- [[https://github.com/Tubo][Tubo]]
- [[https://github.com/Eason0210][Eason0210]]
- [[https://github.com/wang1zhen][wang1zhen]]
- [[https://github.com/shenlebantongying][shenlebantongying]]
- [[https://github.com/nasyxx][nasyxx]]
